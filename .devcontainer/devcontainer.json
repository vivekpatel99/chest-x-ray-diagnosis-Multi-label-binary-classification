{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "chest-x-ray-diagnosis",
	// "image": "tensorflow/tensorflow:latest-gpu-jupyter",
	"build": {
		// Sets the run context to one level up instead of the .devcontainer folder.
		"context": "..",
		// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.
		"dockerfile": "../Dockerfile"
	},
	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [
	// 	6006
	// ],
	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	// "mounts": [],
	// 3. Use 'runArgs' to pass arguments to the container. 
	// run the container with all GPUs
	"runArgs": [
		"--gpus",
		"all",
		"--ulimit",
		"memlock=-1:-1",
		"--ulimit",
		"nofile=65536:65536",
		"--ipc=host" // provide max shared memory or "--shm-size=24g"
	],
	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
	"features": {
		// ZSH without OMZ
		"ghcr.io/devcontainers/features/common-utils:2": {
			"installZsh": "false",
			"configureZshAsDefaultShell": "true",
			"installOhMyZsh": "false",
			"installOhMyZshConfig": "false",
			// "USERNAME": "builder", // Replace with your host username
			// "UID": "${localEnv:UID}", // Automatically gets the host user's UID
			// "GID": "${localEnv:GID}", // Automatically gets the host user's GID
			"upgradePackages": "true"
		},
		// Python with uv, Ruff, Mypy, MonkeyType and Bandit, installed using pipx
		"ghcr.io/devcontainers/features/python:1": {
			"installTools": "true",
			"toolsToInstall": "uv,ruff,mypy,MonkeyType,bandit"
		},
		// git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		}
	},
	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "/usr/local/python/current/bin/python",
				"terminal.integrated.shell.linux": "/bin/bash",
				"terminal.integrated.defaultProfile.linux": "bash"
			},
			// installs useful extensions
			"extensions": [
				"ms-python.python",
				"ms-python.debugpy",
				"ms-python.vscode-pylance",
				"ms-python.isort",
				"ms-toolsai.jupyter",
				"ms-toolsai.jupyter-keymap",
				"ms-toolsai.vscode-jupyter-cell-tags",
				"ms-toolsai.jupyter-renderers",
				"ms-toolsai.vscode-jupyter-slideshow",
				"ms-toolsai.tensorboard",
				"charliermarsh.ruff",
				"VisualStudioExptTeam.vscodeintellicode",
				"Codeium.codeium",
				"RSIP-Vision.nvidia-smi-plus"
			]
		}
	},
	// "containerUser": "ubuntu",
	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "ubuntu",
	"updateRemoteUserUID": true,
	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts
	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",
	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	// for the nvida containers, sh points to sh-wrap. We want it to point to dash
	// https://wiki.debian.org/Shell
	"onCreateCommand": "sudo ln -sf /usr/bin/dash /usr/bin/sh",
	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",
	// 10. Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "sudo chown -R $USER:$USER /code",
	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	// "postStartCommand": "sudo chown -R $USER:$USER /workspaces",
	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully. 
	// "postAttachCommand": "",
}